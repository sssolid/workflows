# ===== docker-compose.yml =====

services:
  # n8n Workflow Engine (Alpine - lightweight)
  n8n:
    build:
      context: .
      dockerfile: docker/Dockerfile.n8n
    container_name: crown_n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    env_file:
      - .env
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=${N8N_BASIC_AUTH_USER:-admin}
      - N8N_BASIC_AUTH_PASSWORD=${N8N_BASIC_AUTH_PASSWORD:-admin}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://${PUBLIC_HOST:-localhost}:5678
      - NODE_ENV=production
      # Service discovery for n8n workflows
      - ML_PROCESSOR_URL=http://ml_processor:8001
      - WEB_SERVER_URL=http://web_server:8080
      - FILE_MONITOR_URL=http://file_monitor:8002
      - IMAGE_PROCESSOR_URL=http://image_processor:8003
      - TEAMS_NOTIFIER_URL=http://teams_notifier:8004
    volumes:
      - n8n_data:/home/node/.n8n
      - ./src:/scripts  # Mount clean architecture source
      - ./config:/config:ro
      - ./data:/data
    networks:
      - crown_network
    depends_on:
      - ml_processor
      - web_server
      - file_monitor
      - image_processor
      - teams_notifier

  # ML Processing Container (Ubuntu - for PyTorch/rembg)
  ml_processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.ml
    container_name: crown_ml_processor
    restart: unless-stopped
    ports:
      - "8001:8001"
    env_file:
      - .env
    environment:
      - CUDA_VISIBLE_DEVICES=""  # CPU-only processing
      - OMP_NUM_THREADS=4
      - MKL_NUM_THREADS=4
    volumes:
      - ./src:/app/src:ro
      - ./config:/config:ro
      - ./data:/data
      - ./assets:/assets:ro
      - ml_models_cache:/root/.cache  # Cache for rembg models
    networks:
      - crown_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Server & Dashboard (Alpine - lightweight)
  web_server:
    build:
      context: .
      dockerfile: docker/Dockerfile.web
    container_name: crown_web_server
    restart: unless-stopped
    ports:
      - "${WEB_PORT:-8080}:8080"
    env_file:
      - .env
    environment:
      - WEB_HOST=0.0.0.0
      - WEB_PORT=8080
    volumes:
      - ./src:/app/src:ro
      - ./config:/config:ro
      - ./templates:/templates:ro
      - ./assets:/assets:ro
      - ./data:/data
    networks:
      - crown_network
    depends_on:
      - ml_processor
      - file_monitor
      - image_processor
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/api/status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # File Monitor (Alpine - lightweight)
  file_monitor:
    build:
      context: .
      dockerfile: docker/Dockerfile.monitor
    container_name: crown_file_monitor
    restart: unless-stopped
    ports:
      - "8002:8002"
    env_file:
      - .env
    volumes:
      - ./src:/app/src:ro
      - ./config:/config:ro
      - ./data:/data
    networks:
      - crown_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Image Processor (Ubuntu - for FileMaker JDBC + complex image processing)
  image_processor:
    build:
      context: .
      dockerfile: docker/Dockerfile.processor
    container_name: crown_image_processor
    restart: unless-stopped
    ports:
      - "8003:8003"
    env_file:
      - .env
    environment:
      - JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
      - JVM_OPTS=-Xmx1g -Xms256m
    volumes:
      - ./src:/app/src:ro
      - ./config:/config:ro
      - ./assets:/assets:ro
      - ./data:/data
    networks:
      - crown_network
    depends_on:
      - file_monitor
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Teams Notifier (Alpine - lightweight)
  teams_notifier:
    build:
      context: .
      dockerfile: docker/Dockerfile.notifier
    container_name: crown_teams_notifier
    restart: unless-stopped
    ports:
      - "8004:8004"
    env_file:
      - .env
    volumes:
      - ./src:/app/src:ro
      - ./config:/config:ro
      - ./templates:/templates:ro
    networks:
      - crown_network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  crown_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  n8n_data:
    driver: local
  ml_models_cache:
    driver: local