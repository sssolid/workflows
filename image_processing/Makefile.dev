# ===== Makefile.dev =====
# Development environment commands

.PHONY: help dev-help dev-setup dev-start dev-stop dev-logs dev-test dev-clean \
         dev-rebuild-web-server dev-rebuild-ml-processor dev-rebuild-file-monitor \
         dev-rebuild-image-processor dev-rebuild-teams-notifier dev-rebuild-n8n-dev \
         dev-rebuild-all dev-images dev-db dev-status

.DEFAULT_GOAL := help

##@ Makefile.dev Help
help:  ## Show this help.
	@awk 'BEGIN {FS = ":.*?## "}; /^[a-zA-Z0-9_%-]+:.*?## .*$$/ { printf "  %-30s %s\n", $$1, $$2 }' $(MAKEFILE_LIST) | sort

dev-help:  ## Show available development commands
	@grep -E '^[a-zA-Z0-9_%-]+:.*?##' $(MAKEFILE_LIST) | awk 'BEGIN {FS = ":.*?## "}; { printf "  %-30s %s\n", $$1, $$2 }'

dev-setup: ## Setup development environment
	@echo "üöÄ Setting up development environment..."
	chmod +x dev/setup_dev_environment.sh
	./dev/setup_dev_environment.sh

dev-start: ## Start development environment
	@echo "‚ñ∂Ô∏è Starting development environment..."
	cp .env.dev .env
	docker-compose -f docker-compose.dev.yml up -d
	@echo "‚úÖ Development environment started"
	@echo "Dashboard: http://localhost:8080"
	@echo "n8n: http://localhost:5678 (admin/admin)"
	@echo "Mock Teams: http://localhost:3000"

dev-stop: ## Stop development environment
	@echo "‚èπÔ∏è Stopping development environment..."
	docker-compose -f docker-compose.dev.yml down

dev-logs: ## Tail container logs
	docker-compose -f docker-compose.dev.yml logs -f

dev-test: ## Run development test
	@echo "üß™ Running development tests..."
	docker-compose -f docker-compose.dev.yml exec web_server python -m pytest tests/ -v

dev-clean: ## Clean and prune environment
	@echo "üßπ Cleaning development environment..."
	docker-compose -f docker-compose.dev.yml down -v
	docker system prune -f
	rm -rf dev/test_data/*
	@echo "‚úÖ Development environment cleaned"

dev-rebuild-web-server: ## Rebuild web server
	docker-compose -f docker-compose.dev.yml build web_server
	docker-compose -f docker-compose.dev.yml up -d --no-deps --build web_server

dev-rebuild-ml-processor: ## Rebuild ml processor
	docker-compose -f docker-compose.dev.yml build ml_processor
	docker-compose -f docker-compose.dev.yml up -d --no-deps --build ml_processor

dev-rebuild-file-monitor: ## Rebuild file monitor
	docker-compose -f docker-compose.dev.yml build file_monitor
	docker-compose -f docker-compose.dev.yml up -d --no-deps --build file_monitor

dev-rebuild-image-processor: ## Rebuild image processor
	docker-compose -f docker-compose.dev.yml build image_processor
	docker-compose -f docker-compose.dev.yml up -d --no-deps --build image_processor

dev-rebuild-teams-notifier: ## Rebuild teams notifier
	docker-compose -f docker-compose.dev.yml build teams_notifier
	docker-compose -f docker-compose.dev.yml up -d --no-deps --build teams_notifier

dev-rebuild-mock-teams: ## Rebuild mock teams
	docker-compose -f docker-compose.dev.yml build mock_teams
	docker-compose -f docker-compose.dev.yml up -d --no-deps --build mock_teams

dev-rebuild-n8n-dev: ## Rebuild n8n dev
	docker-compose -f docker-compose.dev.yml build n8n_dev
	docker-compose -f docker-compose.dev.yml up -d --no-deps --build n8n_dev

dev-rebuild-all: ## Rebuild all
	docker-compose -f docker-compose.dev.yml build web_server ml_processor file_monitor image_processor teams_notifier mock_teams n8n_dev
	docker-compose -f docker-compose.dev.yml up -d --no-deps --build web_server ml_processor file_monitor image_processor teams_notifier mock_teams n8n_dev

dev-images: ## Create sample test images
	@echo "üñºÔ∏è Creating sample test images..."
	python3 dev/create_sample_images.py

dev-db: ## Mock database contents
	@echo "üìä Mock database contents:"
	docker-compose -f docker-compose.dev.yml exec mock_database sqlite3 /app/data/mock_crown.db ".tables"
	docker-compose -f docker-compose.dev.yml exec mock_database sqlite3 /app/data/mock_crown.db "SELECT COUNT(*) as 'Total Parts' FROM Master;"
	docker-compose -f docker-compose.dev.yml exec mock_database sqlite3 /app/data/mock_crown.db "SELECT COUNT(*) as 'Interchange Records' FROM as400_ininter;"

dev-status: ## Development environment status
	@echo "üìä Development Environment Status:"
	docker-compose -f docker-compose.dev.yml ps
	@echo ""
	@echo "üîç Service Health:"
	@curl -s http://localhost:8080/api/status | python -m json.tool || echo "Web server not responding"
